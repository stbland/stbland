/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-3-sd:src/main/java/web/controller/controllerwithPathVariable.e.vm.java
 */
package fr.cora.mesindicateurssi.web.controller;

import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import fr.cora.mesindicateurssi.domain.Indicator;
import fr.cora.mesindicateurssi.repository.IndicatorRepository;
import fr.cora.mesindicateurssi.repository.TagRepository;

@Controller
@RequestMapping("/domain/indicator/")
public class IndicatorControllerWithPathVariable {
    @Autowired
    private IndicatorRepository indicatorRepository;
    @Autowired
    private TagRepository tagRepository;

    /**
     * This method is invoked by Spring MVC before the handler methods.
     * <p>
     * The path variable is converted by SpringMVC to a Indicator via the {@link IndicatorFormatter}.
     * Before being passed as an argument to the handler, SpringMVC binds the attributes on the resulting model,
     * then each handler method may receive the entity, potentially modified, as an argument.
     */
    @ModelAttribute
    public Indicator getIndicator(@PathVariable("pk") Indicator indicator) {
        return indicator;
    }

    /**
     * Serves the show view for the entity.
     */
    @RequestMapping("show/{pk}")
    public String show(@ModelAttribute Indicator indicator) {
        return "domain/indicator/show";
    }

    /**
     * Serves the update form view.
     */
    @RequestMapping(value = "update/{pk}", method = GET)
    public String update(Model model) {
        bindListForSelectInputFields(model);
        return "domain/indicator/update";
    }

    /**
     * Performs the update action and redirect to the show view.
     */
    @RequestMapping(value = "update/{pk}", method = { PUT, POST })
    public String update(@Valid @ModelAttribute Indicator indicator, BindingResult bindingResult, Model model) {
        if (bindingResult.hasErrors()) {
            return update(model);
        }

        indicatorRepository.save(indicator);
        return "redirect:/domain/indicator/show/" + indicator.getId();
    }

    /**
     * Serves the delete form asking the user if the entity should be really deleted.
     */
    @RequestMapping(value = "delete/{pk}", method = GET)
    public String delete() {
        return "domain/indicator/delete";
    }

    /**
     * Performs the delete action and redirect to the search view.
     */
    @RequestMapping(value = "delete/{pk}", method = { PUT, POST, DELETE })
    public String delete(@ModelAttribute Indicator indicator) {
        indicatorRepository.delete(indicator);
        return "redirect:/domain/indicator/search";
    }

    /**
     * Binds to the passed model the possible values for select input fields.
     */
    private void bindListForSelectInputFields(Model model) {
        model.addAttribute("tags", tagRepository.find());
    }
}