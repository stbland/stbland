/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-3-sd:src/main/java/web/controller/restController.e.vm.java
 */
package fr.cora.mesindicateurssi.web.controller;

import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;
import static com.google.common.collect.Lists.newArrayList;

import java.io.PrintWriter;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.format.support.FormattingConversionService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import fr.cora.mesindicateurssi.web.util.AutoCompleteResult;
import fr.cora.mesindicateurssi.repository.support.SearchParameters;
import fr.cora.mesindicateurssi.domain.Address;
import fr.cora.mesindicateurssi.repository.AddressRepository;

@Controller
@RequestMapping("domain/rest/address/")
public class AddressRestController {
    @Autowired
    public FormattingConversionService formattingConversionService;

    @Autowired
    private AddressRepository addressRepository;

    @RequestMapping(value = "/", method = POST)
    @ResponseBody
    public Address create(@Valid Address address) {
        addressRepository.save(address);
        return address.copy();
    }

    @RequestMapping(value = "/", method = POST, headers = "content-type:application/json")
    @ResponseBody
    public Address jsonCreate(@Valid @RequestBody Address address) {
        addressRepository.save(address);
        return address.copy();
    }

    @RequestMapping(value = "/", method = GET)
    @ResponseBody
    public List<Address> list(Address address, SearchParameters searchParameters) {
        Page<Address> page = addressRepository.findWithExample(address, searchParameters.toPageRequest());
        List<Address> ret = newArrayList();
        for (Address _address : page.getContent()) {
            ret.add(_address.copy());
        }
        return ret;
    }

    @RequestMapping(value = "/{pk}", method = GET)
    @ResponseBody
    public Address get(@PathVariable("pk") Address address) {
        return address.copy();
    }

    @RequestMapping(value = "/{pk}", method = PUT)
    @ResponseBody
    public Address update(@PathVariable("pk") Address addressToUpdate, @Valid Address address) {
        address.copyTo(addressToUpdate);
        addressRepository.save(addressToUpdate);
        return addressToUpdate.copy();
    }

    @RequestMapping(value = "/{pk}", method = DELETE)
    @ResponseBody
    public boolean delete(@PathVariable("pk") Address address) {
        addressRepository.delete(address);
        return true;
    }

    @RequestMapping("/autocomplete")
    @ResponseBody
    public List<AutoCompleteResult> autocomplete(@RequestParam(value = "term", required = false) String searchPattern,
            SearchParameters search) {
        if (searchPattern != null && !searchPattern.isEmpty()) {
            search.setSearchPattern(searchPattern);
        }

        List<AutoCompleteResult> ret = newArrayList();
        for (Address address : addressRepository.find(search.getSearchPattern())) {
            String objectPk = address.getId().toString();
            String objectLabel = formattingConversionService.convert(address, String.class);
            ret.add(new AutoCompleteResult(objectPk, objectLabel));
        }
        return ret;
    }

    @ExceptionHandler()
    @ResponseStatus(value = INTERNAL_SERVER_ERROR)
    public void exception(Exception e, PrintWriter out) {
        out.write(e.getMessage());
    }
}