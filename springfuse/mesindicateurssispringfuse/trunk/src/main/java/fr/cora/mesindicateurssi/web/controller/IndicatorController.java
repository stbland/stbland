/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-3-sd:src/main/java/web/controller/controller.e.vm.java
 */
package fr.cora.mesindicateurssi.web.controller;

import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import fr.cora.mesindicateurssi.domain.Indicator;
import fr.cora.mesindicateurssi.repository.IndicatorRepository;
import fr.cora.mesindicateurssi.repository.TagRepository;

@Controller
@RequestMapping("/domain/indicator/")
public class IndicatorController {

    @Autowired
    private IndicatorRepository indicatorRepository;
    @Autowired
    private TagRepository tagRepository;

    /**
     * Performs the list action.
     */
    @RequestMapping( { "", "list" })
    public String list(@ModelAttribute IndicatorSearchForm indicatorSearchForm, Model model) {
        Page<Indicator> page = indicatorRepository.find(indicatorSearchForm);
        model.addAttribute("indicatorsCount", page.getTotalElements());
        model.addAttribute("indicators", page.getContent());
        return "domain/indicator/list";
    }

    /**
     * Serves the create form.
     */
    @RequestMapping(value = "create", method = GET)
    public String create(@ModelAttribute Indicator indicator, Model model) {
        bindListForSelectInputFields(model);
        return "domain/indicator/create";
    }

    /**
     * Performs the create action and redirect to the show view.
     */
    @RequestMapping(value = "create", method = { POST, PUT })
    public String create(@Valid @ModelAttribute Indicator indicator, BindingResult bindingResult, Model model) {
        if (bindingResult.hasErrors()) {
            return create(indicator, model);
        }

        indicatorRepository.save(indicator);
        return "redirect:/domain/indicator/show/" + indicator.getId();
    }

    /**
     * Serves search by example form, search by pattern form and search by named query form.
     */
    @RequestMapping(value = "*", method = GET)
    public void catchAll(@ModelAttribute IndicatorSearchForm indicatorSearchForm, Model model) {
        bindListForSelectInputFields(model);
    }

    /**
     * Binds to the passed model the possible values for select input fields.
     */
    private void bindListForSelectInputFields(Model model) {
        model.addAttribute("tags", tagRepository.find());
    }
}